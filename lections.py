# Вот некоторые из основных классов и структур данных, доступных в Python:

#     int: Класс для целых чисел.
    
#     float: Класс для чисел с плавающей точкой.

#     str: Класс для строковых значений (текст).

#     list: [] Класс для списков, упорядоченных коллекций элементов.
    
#     tuple: () Класс для кортежей, неизменяемых упорядоченных коллекций элементов.

#     dict: {} Класс для словарей, коллекций, состоящих из пар ключ-значение.
    
#     set: {} Класс для множеств, неупорядоченных коллекций уникальных элементов.
    
#     bool: Класс для логических значений True и False.

#     NoneType: Класс для None, представляющего отсутствие значения.   

#=========================================================

# n = (0,1,2)

# a = 10
# b = 5
# c = 2

# print(n) --- варианты вывода переменной

# print(f'n = {n}') 

# print("{} - {} - {}".format(a,b,c))

# print(type(n)) ---   вывод типа данных переменной

# print('Ввести первое число: ')
# a = int(input())
# b = int(input('Ввести второе число: '))
# print(a + b) #ответ 3

# class(input())

#=========================================================

# Округление:  
# a = 5.8908002374
# b = 6.342
# print(a * b)
# print(round(a * b, 3))  # 3 - три знака после запятой ,

#=========================================================

# 123 % 10 = 3
# 123 % 100 = 23
# 123 % 1000 = 123

# 123 / 10 = 12
# 123 / 100 = 1
# 123 / 1000 = 0

#=========================================================

# if elif else
    #Например: 
# x = 10

# if x < 0:
#     print("x отрицательное число")
# elif x == 0:
#     print("x равно нулю")
# else:
#     print("x положительное число")

#=========================================================

# Арифметические операции

#   Знак операции Операция
#   + Сложение
#   - Вычитание
#   * Умножение
#    / Деление (по умолчанию в вещественных числах)
#   % Остаток от деления
#   // Целочисленное деление
#   ** Возведение в степень

#=========================================================

# Логические операции

    #   Знак операции Операция
    #   > Больше
    #   >= Больше или равно
    #   < Меньше
    #   <= Меньше или равно
    #   == Равно (проверяет, равны ли числа)
    #   != Не равно (проверяет, не равны ли значения)
    #   not Не (отрицание)
    #   and И (конъюнкция)
    #   or Или (дизъюнкция)

#=========================================================

# Пример программного кода без использования break:

    #   n = 423
    #   summa = 0
    #   while n > 0:
    #       x = n % 10
    #       summa = summa + x
    #       n = n // 10
    #   else:
    #   print('Пожалуй')
    #   print('хватит )')
    #   print(summa)
    #   # Пожалуй
    #   # хватит )
    #   # 9

#=========================================================
'''
В Python цикл for в основном используется для перебора значений
Пример использования цикла for:
for i in enumeration:
# operator 1
# operator 2
# ...
# operator n
for i in 1, -2, 3, 14, 5:
print(i)
# 1 -2 3 15 5
Range
● Range выдает значения из диапазона с шагом 1.
● Если указано только одно число — от 0 до заданного числа.
● Если нужен другой шаг, третьим аргументов можно задать приращение.
r = range(5) # 0 1 2 3 4
r = range(2, 5) # 2 3 4
r = range(-5, 0) # ----
r = range(1, 10, 2) # 1 3 5 7
r = range(100, 0, -20) # 100 80 60 40 20
r = range(100, 0, -20) # range(100, 0, -20)
for i in r:
print(i)
# 100 80 60 40 20
27
for i in range(5):
print(i)
# 0 1 2 3 4
Можно использовать цикл for() и со строками, так как у строк есть нумерация, такая
же как и у массивов, начинается с 0:
for i in 'qwerty':
print(i)
# q
# w
# e
# r
# t
# y
Можно использовать вложенные циклы:
line = ""
for i in range(5):
line = ""
for j in range(5):
line += "*"
print(line)
'''
#=========================================================
'''
Команды для работы со строками:
text = 'СъЕШЬ ещё этих МяГкИх французских булок'

1. Определить количество символов в строке:
print(len(text)) # 39

2. Проверить наличие символа в строке (in):
print('ещё' in text) # True

3. Функция, которая делает все буквы строки маленькими:
print(text.lower()) # съешь ещё этих мягких французских булок

4. Функция, которая делает все буквы строки большими:
print(text.upper()) # СЪЕШЬ ЕЩЁ ЭТИХ МЯГКИХ ФРАНЦУЗСКИХ БУЛОК

5. Заменить слово на другое :
print(text.replace('ещё','ЕЩЁ')) # СъЕШЬ ЕЩЁ этих МяГкИх французских булок
'''
#=========================================================

# Кортеж — это неизменяемый список. []
# Словари — неупорядоченные коллекции произвольных объектов с доступом по ключу ()

# list_1 = [7, 9, 11, 13, 15, 17]

# В списках существует нумерация, которая начинается с 0, чтобы вывести первый элемент списка воспользуемся следующей конструкцией:
#print(list_1[0]) # 7

# Чтобы узнать количество элементов в списке необходимо использовать функцию len(имя_списка):
#print(len(list_1)) # 6

#=========================================================

# list_1.append()   # сохранение элемента в конец списка
# list_1.pop()   # Метод pop удаляет последний элемент из списка:
# list1.insert(2, 11)  # Функция insert — указание индекса (позиции) и значения. 

#=========================================================

#  list_1 = [12, 7, -1, 21, 0]
#
#  for i in range(len(list_1)):
#       print(list_1[i])     # вывод каждого элемента списка
# или
#
#  for i in range(len(list_1)):
#       print(i)             # вывод каждого элемента списка
#=========================================================

